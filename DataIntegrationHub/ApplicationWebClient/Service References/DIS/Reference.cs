//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationWebClient.DIS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryTimeSpan", Namespace="http://schemas.datacontract.org/2004/07/ApplicationWebService")]
    public enum QueryTimeSpan : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastHours = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastWeek = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastMonth = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Record", Namespace="http://schemas.datacontract.org/2004/07/ApplicationWebService")]
    [System.SerializableAttribute()]
    public partial class Record : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelField, value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdRecord {
            get {
                return this.IdRecordField;
            }
            set {
                if ((this.IdRecordField.Equals(value) != true)) {
                    this.IdRecordField = value;
                    this.RaisePropertyChanged("IdRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodeId {
            get {
                return this.NodeIdField;
            }
            set {
                if ((this.NodeIdField.Equals(value) != true)) {
                    this.NodeIdField = value;
                    this.RaisePropertyChanged("NodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryGroupFunction", Namespace="http://schemas.datacontract.org/2004/07/ApplicationWebService")]
    public enum QueryGroupFunction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Average = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Max = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecordStatistic", Namespace="http://schemas.datacontract.org/2004/07/ApplicationWebService")]
    [System.SerializableAttribute()]
    public partial class RecordStatistic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelField, value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DIS.IDataIntegrationService")]
    public interface IDataIntegrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataIntegrationService/GetRecordsByChannelAndDatespan", ReplyAction="http://tempuri.org/IDataIntegrationService/GetRecordsByChannelAndDatespanResponse" +
            "")]
        ApplicationWebClient.DIS.Record[] GetRecordsByChannelAndDatespan(string[] channels, ApplicationWebClient.DIS.QueryTimeSpan datespan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataIntegrationService/GetRecordsByChannelAndDatespan", ReplyAction="http://tempuri.org/IDataIntegrationService/GetRecordsByChannelAndDatespanResponse" +
            "")]
        System.Threading.Tasks.Task<ApplicationWebClient.DIS.Record[]> GetRecordsByChannelAndDatespanAsync(string[] channels, ApplicationWebClient.DIS.QueryTimeSpan datespan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataIntegrationService/GetRecordsByDataRange", ReplyAction="http://tempuri.org/IDataIntegrationService/GetRecordsByDataRangeResponse")]
        ApplicationWebClient.DIS.RecordStatistic[] GetRecordsByDataRange(System.DateTime dateMin, System.DateTime dateMax, ApplicationWebClient.DIS.QueryGroupFunction groupFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataIntegrationService/GetRecordsByDataRange", ReplyAction="http://tempuri.org/IDataIntegrationService/GetRecordsByDataRangeResponse")]
        System.Threading.Tasks.Task<ApplicationWebClient.DIS.RecordStatistic[]> GetRecordsByDataRangeAsync(System.DateTime dateMin, System.DateTime dateMax, ApplicationWebClient.DIS.QueryGroupFunction groupFunction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataIntegrationServiceChannel : ApplicationWebClient.DIS.IDataIntegrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataIntegrationServiceClient : System.ServiceModel.ClientBase<ApplicationWebClient.DIS.IDataIntegrationService>, ApplicationWebClient.DIS.IDataIntegrationService {
        
        public DataIntegrationServiceClient() {
        }
        
        public DataIntegrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataIntegrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataIntegrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataIntegrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ApplicationWebClient.DIS.Record[] GetRecordsByChannelAndDatespan(string[] channels, ApplicationWebClient.DIS.QueryTimeSpan datespan) {
            return base.Channel.GetRecordsByChannelAndDatespan(channels, datespan);
        }
        
        public System.Threading.Tasks.Task<ApplicationWebClient.DIS.Record[]> GetRecordsByChannelAndDatespanAsync(string[] channels, ApplicationWebClient.DIS.QueryTimeSpan datespan) {
            return base.Channel.GetRecordsByChannelAndDatespanAsync(channels, datespan);
        }
        
        public ApplicationWebClient.DIS.RecordStatistic[] GetRecordsByDataRange(System.DateTime dateMin, System.DateTime dateMax, ApplicationWebClient.DIS.QueryGroupFunction groupFunction) {
            return base.Channel.GetRecordsByDataRange(dateMin, dateMax, groupFunction);
        }
        
        public System.Threading.Tasks.Task<ApplicationWebClient.DIS.RecordStatistic[]> GetRecordsByDataRangeAsync(System.DateTime dateMin, System.DateTime dateMax, ApplicationWebClient.DIS.QueryGroupFunction groupFunction) {
            return base.Channel.GetRecordsByDataRangeAsync(dateMin, dateMax, groupFunction);
        }
    }
}
